#!/usr/bin/perl -w

use DBI;
use strict;
use warnings;
use Text::LevenshteinXS qw (distance);

# ASIGNA UN NUMERO IDENTIFICADRO DE AMBIENTE A CADA GRUPO DE MUESTRAS QUE TENGAN EL MISMO ISOLATION SOURCE Y METADATOS

# CORREGIR

my $dbh = DBI->connect( "dbi:Pg:dbname=microdb;host=localhost","agirre", "", { RaiseError => 0, AutoCommit => 0 } );
unless ( defined($dbh) ) {die "Ha habido un problema al conectar con la base de datos:"  . $DBI::errstr  unless ( defined($dbh) );}


my $sthlimpiar='';
$sthlimpiar = $dbh->prepare("UPDATE ambiente set Pmid='', ID_ambiente='', Nombre_tipo='', metadata='')");
unless ( defined ($sthlimpiar) ) {die "no se pueden prepara las datos para insertarlos en las tablas\n";}

my $errflag = 0;
my $metadatos = '';
my $line = '';
my $idmu = '';
my @idmu = ();
my $idam=0;
my $a='';
my $e='';
my $i='';
my $o='';
my $u=0;
my $aa='';
my $ee='';
my @dif=();
my $iso2='';
my @posicion=();
my $meta2 = '';
my $posiso='';
my $posmeta='';
my $pospmid='';
my $pmid='';
my $iso='';
my $meta='';
my @dato=();
my @iso=();
my @meta=();
my @pmid=();
my $dato='';
my $izen='';

 #conexion a la base de datos
 # Vamos a ejecutar la sentencia para preparar la introducion a la base de datos

my $sthambiente = $dbh->prepare("INSERT INTO ambiente(Pmid, ID_ambiente, Nombre_tipo, metadata) VALUES (?, ?, ?, ?)");
unless ( defined ($sthambiente) ) {die "no se pueden prepara las datos para insertarlos en las tablas\n";}

my $sthpmid = $dbh->prepare("SELECT id_muestra FROM muestra " );
unless ( defined ($sthpmid) ) {die "no se pueden prepara las datos para insertarlos en las tablas\n";}

my $sthidam = $dbh->prepare("SELECT micro.pmid, micro.isolation_source, micro.Metadatos WHERE muestra.id_muestra=? AND micro.pmid=muestra.pmid");
unless ( defined ($sthidam) ) {die "no se pueden prepara las datos para insertarlos en las tablas\n";}	## REVISARLO
############################# LOGRAR TODAS LAS MUESTRAS

unless ( $sthpmid->execute ) {die "Se ha producido un problema al conectar con la base de datos: " . $DBI::errstr unless ( defined($dbh) );}
if ($sthpmid->rows == 0) {
	print "NO MATCHES FOR ID_MUESTRA.\n\n";
}
else {
	@idmu = $sthpmid->fetchrow_array();
}
## EL NUMERO DE IDENTIFICADOR ################################################

foreach $idmu(@idmu){
	##### LOGRAR EL IDENTIFICADOR DE MUESTRA ################################
	unless ( $sthidam->execute($idmu) ) {die "Se ha producido un problema al conectar con la base de datos: " . $DBI::errstr unless ( defined($dbh) );}
	if ($sthidam->rows == 0) {
			print "NO MATCHES FOR $idmu.\n\n";
		}
	else {
		while ( ($pmid, $iso, $meta) = $sthidam->fetchrow_array() ){
			$dato="$iso|$meta";
			push (@dato, $dato);
			push (@iso, $iso);
			push (@pmid, $pmid);
			push (@meta, $meta);
		}
		foreach $a(@dato){
			$idam++;
			foreach $e(@dato){
				$izen = distance ($a, $e);
				if ($izen == 0){
					push (@dif, $a);
					push (@posicion, $dato[$u])
				}
			$u++;
			}
			$u=0;
			## eliminar del @dato los que han entrado en @dif 
			for ($aa=scalar@dato; $aa == 0 ;$aa--){
				foreach $e(@posicion){
					if ($aa = $e){
						splice (@dato, $aa, 1); # elimina del array el elemento de la posicion $aa
					}
				}
			}
			foreach $o(@dif){
				
				if ($o =~ /(.+)\|(.+)/){
					$iso2=$1;
					$meta2=$2;
					foreach $ee(@iso){
						$i=0;
						if ($ee eq $iso2){
							$posiso=$iso[$i];
							$posmeta=$meta[$i];
							$pospmid=$pmid[$i];
							print "$pospmid, $idam, $posiso, $posmeta\n";
#							if ( !$sthambiente->execute($pmid, $idam, $iso, $metadatos)) {
#								warn "error al insertar: " . $DBI::errstr;
#								$errflag = 1;
#								exit;
#							}

							if ( !$errflag ) {
								$dbh->commit();
							}
							else {
								$dbh->rollback();
							}
						}
						$i++;
					}
				}
			}
		}
		

	}
}

##################### Fin del bucle de cada archivo
#Cerrar todas las transaciones con las tablas

$sthambiente->finish() unless ($DBI::err);
warn "Error de consulta: " . $DBI::errstr if ($DBI::err);

$sthlimpiar->finish() unless ($DBI::err);
warn "Error de consulta: " . $DBI::errstr if ($DBI::err);

$sthidam->finish() unless ($DBI::err);
warn "Error de consulta: " . $DBI::errstr if ($DBI::err);

$sthpmid->finish() unless ($DBI::err);
warn "Error de consulta: " . $DBI::errstr if ($DBI::err);

#Cerrar la conecsion con la base de datos y el archivo
$dbh->disconnect() || warn " Fallo al desconectar . Error : $DBI::errstr \n ";

exit;
